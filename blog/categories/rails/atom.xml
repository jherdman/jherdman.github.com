<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: rails | jherdman.ca]]></title>
  <link href="http://jherdman.ca/blog/categories/rails/atom.xml" rel="self"/>
  <link href="http://jherdman.ca/"/>
  <updated>2012-10-01T08:21:57-04:00</updated>
  <id>http://jherdman.ca/</id>
  <author>
    <name><![CDATA[James Herdman]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[A Common Rails Controller Testing Antipattern]]></title>
    <link href="http://jherdman.ca/2012-09-30/common-rails-controller-testing-antipattern"/>
    <updated>2012-09-30T23:18:00-04:00</updated>
    <id>http://jherdman.ca/2012-09-30/common-rails-controller-testing-antipattern</id>
    <content type="html"><![CDATA[<p>Here's a run of the mill test for a Rails controller action:</p>

<p>```ruby
describe PostsController do
  describe 'GET #show' do</p>

<pre><code>let(:post) { mock_model(Post) }

before do
  Post.stub(:find =&gt; post)
end

it 'loads the requested resource' do
  get :show, :id =&gt; post.id
  expect(assigns(:post)).to eq(post)
end
</code></pre>

<p>  end
end
```</p>

<p>This isn't a horrible test, but there's a common antipattern where we are requesting the resource: we're explicitly using the record's database ID, line 10. All ActiveRecord objects have a URI friendly name via the <a href="https://github.com/rails/rails/blob/3-2-stable/activemodel/lib/active_model/conversion.rb#L49-53">ActiveModel::Naming#to_param</a> method. Let's rewrite our test to use this method:</p>

<p>```ruby
describe PostsController do
  describe 'GET #show' do</p>

<pre><code>let(:post) { mock_model(Post) }

before do
  Post.stub(:find =&gt; post)
end

it 'loads the requested resource' do
  get :show, :id =&gt; post.to_param
  expect(assigns(:post)).to eq(post)
end
</code></pre>

<p>  end
end
```</p>

<p>This insulates us from changes to how a resource might be represented in the URI, and more accruately represents how Rails internally handles your resource with URI helpers. For more of the gory details, check out <a href="https://github.com/rails/rails/blob/3-2-stable/actionpack/lib/action_dispatch/routing/polymorphic_routes.rb">ActionDispatch::Routing::PolymorphicRoutes</a>.</p>

<h3>Edit</h3>

<ul>
<li>Updated both examples to remove another common silly antipattern in my examples. A tip of the hat to <a href="https://twitter.com/camwest">@camwest</a>.</li>
</ul>

]]></content>
  </entry>
  
</feed>
