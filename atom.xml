<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[jherdman.ca]]></title>
  <link href="http://jherdman.ca/atom.xml" rel="self"/>
  <link href="http://jherdman.ca/"/>
  <updated>2012-10-05T11:50:36-04:00</updated>
  <id>http://jherdman.ca/</id>
  <author>
    <name><![CDATA[James Herdman]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Open Ended Ruby Date Ranges]]></title>
    <link href="http://jherdman.ca/2012-10-05/open-ended-ruby-date-ranges"/>
    <updated>2012-10-05T11:44:00-04:00</updated>
    <id>http://jherdman.ca/2012-10-05/open-ended-ruby-date-ranges</id>
    <content type="html"><![CDATA[<p>Have you ever needed an open-ended <code>Date</code> range in Ruby? Well, check this out:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="nb">require</span> <span class="s1">&#39;date&#39;</span>
</span><span class='line'>
</span><span class='line'><span class="n">some_date</span> <span class="o">=</span> <span class="no">Date</span><span class="o">.</span><span class="n">today</span>
</span><span class='line'><span class="n">tomorrow</span> <span class="o">=</span> <span class="n">some_date</span> <span class="o">+</span> <span class="mi">1</span>
</span><span class='line'><span class="n">yesterday</span> <span class="o">=</span> <span class="n">some_date</span> <span class="o">-</span> <span class="mi">1</span>
</span><span class='line'>
</span><span class='line'><span class="n">open_ended_range</span> <span class="o">=</span> <span class="p">(</span><span class="n">some_date</span><span class="o">.</span><span class="n">.</span><span class="mi">1</span><span class="o">/</span><span class="mi">0</span><span class="o">.</span><span class="mi">0</span><span class="p">)</span>
</span><span class='line'><span class="c1"># =&gt; ((2456206j,0s,0n),+0s,2299161j)&gt;..Infinity</span>
</span><span class='line'>
</span><span class='line'><span class="n">open_ended_range</span><span class="o">.</span><span class="n">include?</span><span class="p">(</span><span class="n">tomorrow</span><span class="p">)</span>
</span><span class='line'><span class="c1"># =&gt; true</span>
</span><span class='line'>
</span><span class='line'><span class="n">open_ended_range</span><span class="o">.</span><span class="n">include?</span><span class="p">(</span><span class="n">yesterday</span><span class="p">)</span>
</span><span class='line'><span class="c1"># =&gt; false</span>
</span></code></pre></td></tr></table></div></figure>


<p>Pretty rad stuff.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[A Common Rails Controller Testing Antipattern]]></title>
    <link href="http://jherdman.ca/2012-09-30/common-rails-controller-testing-antipattern"/>
    <updated>2012-09-30T23:18:00-04:00</updated>
    <id>http://jherdman.ca/2012-09-30/common-rails-controller-testing-antipattern</id>
    <content type="html"><![CDATA[<p>Here&#8217;s a run of the mill test for a Rails controller action:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">describe</span> <span class="no">PostsController</span> <span class="k">do</span>
</span><span class='line'>  <span class="n">describe</span> <span class="s1">&#39;GET #show&#39;</span> <span class="k">do</span>
</span><span class='line'>    <span class="n">let</span><span class="p">(</span><span class="ss">:post</span><span class="p">)</span> <span class="p">{</span> <span class="n">mock_model</span><span class="p">(</span><span class="no">Post</span><span class="p">)</span> <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">before</span> <span class="k">do</span>
</span><span class='line'>      <span class="no">Post</span><span class="o">.</span><span class="n">stub</span><span class="p">(</span><span class="ss">:find</span> <span class="o">=&gt;</span> <span class="n">post</span><span class="p">)</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">it</span> <span class="s1">&#39;loads the requested resource&#39;</span> <span class="k">do</span>
</span><span class='line'>      <span class="n">get</span> <span class="ss">:show</span><span class="p">,</span> <span class="ss">:id</span> <span class="o">=&gt;</span> <span class="n">post</span><span class="o">.</span><span class="n">id</span>
</span><span class='line'>      <span class="n">expect</span><span class="p">(</span><span class="n">assigns</span><span class="p">(</span><span class="ss">:post</span><span class="p">))</span><span class="o">.</span><span class="n">to</span> <span class="n">eq</span><span class="p">(</span><span class="n">post</span><span class="p">)</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>This isn&#8217;t a horrible test, but there&#8217;s a common antipattern where we are requesting the resource: we&#8217;re explicitly using the record&#8217;s database ID, line 10. All ActiveRecord objects have a URI friendly name via the <a href="https://github.com/rails/rails/blob/3-2-stable/activemodel/lib/active_model/conversion.rb#L49-53">ActiveModel::Naming#to_param</a> method. Let&#8217;s rewrite our test to use this method:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">describe</span> <span class="no">PostsController</span> <span class="k">do</span>
</span><span class='line'>  <span class="n">describe</span> <span class="s1">&#39;GET #show&#39;</span> <span class="k">do</span>
</span><span class='line'>    <span class="n">let</span><span class="p">(</span><span class="ss">:post</span><span class="p">)</span> <span class="p">{</span> <span class="n">mock_model</span><span class="p">(</span><span class="no">Post</span><span class="p">)</span> <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">before</span> <span class="k">do</span>
</span><span class='line'>      <span class="no">Post</span><span class="o">.</span><span class="n">stub</span><span class="p">(</span><span class="ss">:find</span> <span class="o">=&gt;</span> <span class="n">post</span><span class="p">)</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">it</span> <span class="s1">&#39;loads the requested resource&#39;</span> <span class="k">do</span>
</span><span class='line'>      <span class="n">get</span> <span class="ss">:show</span><span class="p">,</span> <span class="ss">:id</span> <span class="o">=&gt;</span> <span class="n">post</span><span class="o">.</span><span class="n">to_param</span>
</span><span class='line'>      <span class="n">expect</span><span class="p">(</span><span class="n">assigns</span><span class="p">(</span><span class="ss">:post</span><span class="p">))</span><span class="o">.</span><span class="n">to</span> <span class="n">eq</span><span class="p">(</span><span class="n">post</span><span class="p">)</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>This insulates us from changes to how a resource might be represented in the URI, and more accruately represents how Rails internally handles your resource with URI helpers. For more of the gory details, check out <a href="https://github.com/rails/rails/blob/3-2-stable/actionpack/lib/action_dispatch/routing/polymorphic_routes.rb">ActionDispatch::Routing::PolymorphicRoutes</a>.</p>

<h3>Edit</h3>

<ul>
<li>Updated both examples to remove another common silly antipattern in my examples. A tip of the hat to <a href="https://twitter.com/camwest">@camwest</a>.</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Programming Goals For 2012]]></title>
    <link href="http://jherdman.ca/2012-01-15/programming-goals-for-2012"/>
    <updated>2012-01-15T00:00:00-05:00</updated>
    <id>http://jherdman.ca/2012-01-15/programming-goals-for-2012</id>
    <content type="html"><![CDATA[<p>Ah, January. It&#8217;s a new year, and a time wherein we set new goals for the year. An important part of goal setting is visibility &#8211; not only being reminded of your goals, but being able to track and measure your progress towards attaining them.</p>

<h3>Learn a Functional Language</h3>

<p>I mostly do object oriented programming using Ruby on a day-to-day basis. It&#8217;s high time I learn a functional language. The paradigm shift will not only help me think in new ways, but it will open up new avenues of solving problems.</p>

<p>Here are some candidate languages:</p>

<ul>
<li>Haskell</li>
<li>Clojure</li>
<li>Scheme</li>
<li>Erlang</li>
</ul>


<p>I&#8217;ve been reading <a href="http://learnyouahaskell.com">Learn You a Haskell</a>, and I&#8217;m quite enjoying it, but Clojure has a certain appeal to me I can&#8217;t quite put my finger on yet.</p>

<h3>Have a Better Understanding of the Foundations</h3>

<p>I primarily work on HTTP APIs, but I don&#8217;t feel that I understand enough about HTTP, TCP/IP, and networking in general. I need to rectify this.</p>

<h3>Publish More Blog Articles</h3>

<p>I want to ensure my learnings have been captured and thought out, so I intend on blogging about them much more frequently than I have in the past. This article, in fact, is the first step towards this goal.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[An Introduction to Git]]></title>
    <link href="http://jherdman.ca/2011-01-19/an-introduction-to-git"/>
    <updated>2011-01-19T00:00:00-05:00</updated>
    <id>http://jherdman.ca/2011-01-19/an-introduction-to-git</id>
    <content type="html"><![CDATA[<p>Back in December I did a presentation for the <a href="http://www.meetup.com/torontoruby/">Toronto Ruby Brigade</a> introducing Git, and its core concepts. Here are my slides:</p>

<div style="width:425px" id="__ss_6205221"><strong style="display:block;margin:12px 0 4px"><a href="http://www.slideshare.net/jherdman/an-introduction-to-6205221" title="Introduction to Git">Introduction to Git</a></strong><object id="__sse6205221" width="425" height="355"><param name="movie" value="http://static.slidesharecdn.com/swf/ssplayer2.swf?doc=anintroductiontogithd-101217004405-phpapp01&stripped_title=an-introduction-to-6205221&userName=jherdman" /><param name="allowFullScreen" value="true"/><param name="allowScriptAccess" value="always"/><embed name="__sse6205221" src="http://static.slidesharecdn.com/swf/ssplayer2.swf?doc=anintroductiontogithd-101217004405-phpapp01&stripped_title=an-introduction-to-6205221&userName=jherdman" type="application/x-shockwave-flash" allowscriptaccess="always" allowfullscreen="true" width="425" height="355"></embed></object><div style="padding:5px 0 12px">View more <a href="http://www.slideshare.net/">presentations</a> from <a href="http://www.slideshare.net/jherdman">jherdman</a>.</div></div>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[A Quick Cucumber Tip]]></title>
    <link href="http://jherdman.ca/2010-09-02/quick-cucumber-tip"/>
    <updated>2010-09-02T00:00:00-04:00</updated>
    <id>http://jherdman.ca/2010-09-02/quick-cucumber-tip</id>
    <content type="html"><![CDATA[<p><abbr title="Don't Repeat Yourself">DRY</abbr> code makes me a happy camper, so when I see patterns in my regular expressions in my Cucumber stories, I get a little agitated. These patterns come up quick frequently if you are using the explicit record retrieval pattern in your stories. Here are some examples of the steps we want to refine:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="no">Given</span> <span class="sr">/^I am a logged in user with the email address &quot;([^&quot;]+)&quot;$/</span> <span class="k">do</span> <span class="o">|</span><span class="n">email_address</span><span class="o">|</span>
</span><span class='line'>  <span class="n">user</span> <span class="o">=</span> <span class="no">User</span><span class="o">.</span><span class="n">find_by_email_address!</span><span class="p">(</span><span class="n">email_address</span><span class="p">)</span>
</span><span class='line'>  <span class="c1"># etc</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="no">When</span> <span class="sr">/^I view the (\d+)(?:st|nd|rd|th) item$/</span> <span class="k">do</span> <span class="o">|</span><span class="n">pos</span><span class="o">|</span>
</span><span class='line'>  <span class="n">within</span> <span class="s2">&quot;#items .item:nth-child(</span><span class="si">#{</span><span class="n">pos</span><span class="si">}</span><span class="s2">)&quot;</span> <span class="k">do</span>
</span><span class='line'>    <span class="c1"># etc</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>Note the <code>"([<sup>"]+)"</code></sup> and <code>(?:st|nd|rd|th)</code> patterns. Let&#8217;s extract those patterns so that we never have to type them out again.</p>

<p>The key to this is to recognize that Cucumber automatically loads all Ruby files in the &#8220;support&#8221; and &#8220;step_definitions&#8221; directories. Let&#8217;s create a file called &#8220;constants.rb&#8221; in &#8220;support&#8221;. Here&#8217;s mine:</p>

<script src="http://gist.github.com/576424.js"> </script>


<p>We can now rewrite our step definitions above to use these constants:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="no">Given</span> <span class="sr">/^I am a logged in user with the email address </span><span class="si">#{</span><span class="no">PHRASE</span><span class="si">}</span><span class="sr">$/</span> <span class="k">do</span> <span class="o">|</span><span class="n">email_address</span><span class="o">|</span>
</span><span class='line'>  <span class="n">user</span> <span class="o">=</span> <span class="no">User</span><span class="o">.</span><span class="n">find_by_email_address!</span><span class="p">(</span><span class="n">email_address</span><span class="p">)</span>
</span><span class='line'>  <span class="c1"># etc</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="no">When</span> <span class="sr">/^I view the (\d+)</span><span class="si">#{</span><span class="no">POSITION</span><span class="si">}</span><span class="sr"> item$/</span> <span class="k">do</span> <span class="o">|</span><span class="n">pos</span><span class="o">|</span>
</span><span class='line'>  <span class="n">within</span> <span class="s2">&quot;#items .item:nth-child(</span><span class="si">#{</span><span class="n">pos</span><span class="si">}</span><span class="s2">)&quot;</span> <span class="k">do</span>
</span><span class='line'>    <span class="c1"># etc</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>Now we have cleaner steps, with less repetition, and they should take us a little less time to write out in the future. Use, abuse and fork my module above.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[A Quick Vim Tips -- Using Markdown]]></title>
    <link href="http://jherdman.ca/2010-07-28/quick-vim-tips-using-markdown"/>
    <updated>2010-07-28T00:00:00-04:00</updated>
    <id>http://jherdman.ca/2010-07-28/quick-vim-tips-using-markdown</id>
    <content type="html"><![CDATA[<p><a href="http://www.vim.org">Vim</a> is my text editor of choice. It doesn&#8217;t have all of the niceties of <a href="http://macromates.com">TextMate</a>, so you often have to assemble them yourself through user scripts and configuration. One of those areas that Vim needed a little assistance in was its support of <a href="http://daringfireball.net/projects/markdown/">Markdown</a>. The following are some quick tips for improving Vim&#8217;s handling of Markdown.</p>

<h2>Get Better Syntax Support</h2>

<p>Ben Williams has written a fairly good syntax definition for Markdown. It&#8217;s unfortunately not on Vim&#8217;s script index, so you&#8217;ll just have to <a href="http://plasticboy.com/markdown-vim-mode/">grab it from his blog</a>.</p>

<h2>Preview Support</h2>

<p>Chances are your package management system has <a href="http://www.pell.portland.or.us/~orc/Code/discount/">Discount</a> available. Install it. Once you do so, you&#8217;ll have a command line tool called &#8220;markdown&#8221; at your disposal. Once you do so, open up your vimrc and add the following to it:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='vim'><span class='line'><span class="c">&quot; Markdown preview</span>
</span><span class='line'>imap &amp;<span class="k">lt</span>;leader&amp;gt;<span class="k">p</span> &amp;<span class="k">lt</span>;ESC&amp;gt;:<span class="k">w</span><span class="p">!</span>&amp;<span class="k">lt</span>;CR&amp;gt;:<span class="p">!</span>markdown % &amp;<span class="k">lt</span>; %.html &amp;amp;&amp;amp; open %.html&amp;<span class="k">lt</span>;CR&amp;gt;&amp;<span class="k">lt</span>;CR<span class="p">&gt;</span><span class="k">a</span>
</span><span class='line'>map  &amp;<span class="k">lt</span>;leader&amp;gt;<span class="k">p</span> &amp;<span class="k">lt</span>;ESC&amp;gt;:<span class="k">w</span><span class="p">!</span>&amp;<span class="k">lt</span>;CR&amp;gt;:<span class="p">!</span>markdown % &amp;<span class="k">lt</span>; %.html &amp;amp;&amp;amp; open %.html&amp;<span class="k">lt</span>;CR&amp;gt;&amp;<span class="k">lt</span>;CR<span class="p">&gt;</span><span class="k">a</span>
</span></code></pre></td></tr></table></div></figure>


<p>This will generate a preview of your Markdown file that you are currently viewing. If you&#8217;re really clever, you&#8217;ll also add &#8220;*.mkd.html&#8221; to your gitignore file so that you don&#8217;t have to worry about the generated preview.</p>

<h2>Soft Wrap Your Document</h2>

<p>Head on over to <a href="http://vimcasts.org/episodes/soft-wrapping-text/">Vim Casts</a> to learn about how to use soft word wrapping in your documents. I find soft wrapped text much more natural looking when writing documents.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Public Asset Bundling in Rails]]></title>
    <link href="http://jherdman.ca/2010-05-06/public-asset-bundling"/>
    <updated>2010-05-06T00:00:00-04:00</updated>
    <id>http://jherdman.ca/2010-05-06/public-asset-bundling</id>
    <content type="html"><![CDATA[<h2>IMPORTANT NOTE</h2>

<p>The below is kept merely for historical purposes. You should not use the techniques
described below as Rails&#8217; <a href="http://guides.rubyonrails.org/asset_pipeline.html">Asset Pipeline</a>
is a much better option</p>

<hr>


<p>Sometimes, in larger Rails projects, we want to group together JavaScript or <abbr title="Cascading Style Sheet">CSS</abbr> files. Let&#8217;s use the the <a href="http://www.uploadify.com/" title="Uploadify: a Multiple File Upload Plugin for jQuery">Uploadify</a> project to illustrate how we can use a seldom discussed Rails feature to simplify inclusion of <abbr title="Cascading Style Sheet">CSS</abbr> and JavaScript files that are used in conjunction with each other: <code>ActionView::Helpers::AssetTagHelper</code>.</p>

<h2>Materials</h2>

<ul>
<li><a href="http://www.uploadify.com/" title="Uploadify: a Multiple File Upload Plugin for jQuery">Uploadify</a></li>
<li><a href="http://jquery.com/">jQuery</a></li>
</ul>


<h2>Considering the Norm</h2>

<p>Rails defines a set of default JavaScript files to include in our view when we use <code>#javascript_include_tag(:default)</code>. From the Rails documentation we can see an example of the output:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">javascript_include_tag</span> <span class="ss">:defaults</span> <span class="c1"># =&gt;</span>
</span><span class='line'>    <span class="s2">&quot;&lt;script type=&#39;text/javascript&#39; src=&#39;/javascripts/prototype.js&#39;&gt;&lt;/script&gt;</span>
</span><span class='line'><span class="s2">    &lt;script type=&#39;text/javascript&#39; src=&#39;/javascripts/effects.js&#39;&gt;&lt;/script&gt;</span>
</span><span class='line'><span class="s2">    ...</span>
</span><span class='line'><span class="s2">    &lt;script type=&#39;text/javascript&#39; src=&#39;/javascripts/application.js&#39;&gt;&lt;/script&gt;&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<p>This is called an expansion. We have expansions for JavaScript and Stylesheets. We can use with both <code>#javascript_include_tag</code> and <code>#stylesheet_link_tag</code>. We can also register our own. It&#8217;s through expansions that we can bundle together JavaScript and and CSS files.</p>

<h2>Registering Expansions</h2>

<p>Registering expansions is done through two different methods: <code>ActionView::Helpers::AssetTagHelper.register_javascript_expansion</code>, and <code>ActionView::Helpers::AssetTagHelper.register_stylesheet_expansion</code>. Each of these methods takes a Hash as an argument which points to a list of asset names (e.g. &#8220;jquery.js&#8221;).</p>

<p>Let&#8217;s look at how we would define the default <code>:default</code> for our JavaScript bundle:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="no">ActionView</span><span class="o">::</span><span class="no">Helpers</span><span class="o">::</span><span class="no">AssetTagHelper</span><span class="o">.</span><span class="n">register_javascript_expansion</span> <span class="ss">:default</span> <span class="o">=&gt;</span> <span class="o">[</span>
</span><span class='line'>  <span class="s1">&#39;prototype&#39;</span><span class="p">,</span>
</span><span class='line'>  <span class="s1">&#39;effects&#39;</span><span class="p">,</span>
</span><span class='line'>  <span class="o">.</span><span class="n">.</span><span class="o">.</span>
</span><span class='line'>  <span class="s1">&#39;application&#39;</span>
</span><span class='line'><span class="o">]</span>
</span></code></pre></td></tr></table></div></figure>


<p>That&#8217;s a little verbose for setting the default, so Rails provides us <code>ActionView::Helpers::AssetTagHelper.register_javascript_include_default</code>. Let&#8217;s try this again:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="no">ActionView</span><span class="o">::</span><span class="no">Helpers</span><span class="o">::</span><span class="no">AssetTagHelper</span><span class="o">.</span><span class="n">register_javascript_include_default</span><span class="p">(</span>
</span><span class='line'>  <span class="s1">&#39;prototype&#39;</span><span class="p">,</span>
</span><span class='line'>  <span class="s1">&#39;effects&#39;</span><span class="p">,</span>
</span><span class='line'>  <span class="o">.</span><span class="n">.</span><span class="o">.</span>
</span><span class='line'>  <span class="s1">&#39;application&#39;</span>
</span><span class='line'><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>Let&#8217;s set a default using jQuery:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="no">ActionView</span><span class="o">::</span><span class="no">Helpers</span><span class="o">::</span><span class="no">AssetTagHelper</span><span class="o">.</span><span class="n">register_javascript_include_default</span><span class="p">(</span>
</span><span class='line'>  <span class="s1">&#39;jquery&#39;</span><span class="p">,</span>
</span><span class='line'>  <span class="s1">&#39;application&#39;</span>
</span><span class='line'><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>Easy as pie! Let&#8217;s setup expansions for <a href="http://www.uploadify.com/" title="Uploadify: a Multiple File Upload Plugin for jQuery">Uploadify</a>:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="no">ActionView</span><span class="o">::</span><span class="no">Helpers</span><span class="o">::</span><span class="no">AssetTagHelper</span><span class="o">.</span><span class="n">register_javascript_expansion</span> <span class="ss">:uploadify</span> <span class="o">=&gt;</span> <span class="o">[</span>
</span><span class='line'>  <span class="s1">&#39;swfobject&#39;</span><span class="p">,</span>
</span><span class='line'>  <span class="s1">&#39;uploadify&#39;</span><span class="p">,</span>
</span><span class='line'><span class="o">]</span>
</span><span class='line'>
</span><span class='line'><span class="no">ActionView</span><span class="o">::</span><span class="no">Helpers</span><span class="o">::</span><span class="no">AssetTagHelper</span><span class="o">.</span><span class="n">register_stylesheet_expansion</span> <span class="ss">:uploadify</span> <span class="o">=&gt;</span> <span class="o">[</span>
</span><span class='line'>  <span class="s1">&#39;uploadify&#39;</span>
</span><span class='line'><span class="o">]</span>
</span></code></pre></td></tr></table></div></figure>


<p>Now we can easily maintain asset bundles. Cool, eh?</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Another Way to Define Node.js Objects]]></title>
    <link href="http://jherdman.ca/2010-04-10/another-way-to-define-nodejs-objects"/>
    <updated>2010-04-10T00:00:00-04:00</updated>
    <id>http://jherdman.ca/2010-04-10/another-way-to-define-nodejs-objects</id>
    <content type="html"><![CDATA[<p>In <a href="http://jherdman.ca/2010-04-05/understanding-nodejs-require.html">my last post</a> I discussed different ways to define objects using the <a href="http://commonjs.org/">CommonJS</a> module system as implemented in <a href="http://nodejs.org/">Node.js</a>. There&#8217;s one particular example I wanted to revisit:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">var</span> <span class="nx">Circle</span> <span class="o">=</span> <span class="kd">function</span> <span class="p">(</span><span class="nx">radius</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">this</span><span class="p">.</span><span class="nx">radius</span> <span class="o">=</span> <span class="nx">radius</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="nx">Circle</span><span class="p">.</span><span class="nx">PI</span> <span class="o">=</span> <span class="mf">3.14</span>
</span><span class='line'>
</span><span class='line'><span class="nx">Circle</span><span class="p">.</span><span class="nx">prototype</span> <span class="o">=</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">area</span><span class="o">:</span> <span class="kd">function</span> <span class="p">()</span> <span class="p">{</span>
</span><span class='line'>      <span class="k">return</span> <span class="nx">Circle</span><span class="p">.</span><span class="nx">PI</span> <span class="o">*</span> <span class="k">this</span><span class="p">.</span><span class="nx">radius</span> <span class="o">*</span> <span class="k">this</span><span class="p">.</span><span class="nx">radius</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="nx">exports</span><span class="p">.</span><span class="nx">Circle</span> <span class="o">=</span> <span class="nx">Circle</span>
</span></code></pre></td></tr></table></div></figure>


<p>I had decried this form as awkward as illustrated by this scenario:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">node</span><span class="o">&gt;</span> <span class="kd">var</span> <span class="nx">circle</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">&#39;circle_object&#39;</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span> <span class="nx">Circle</span><span class="o">:</span> <span class="p">{</span> <span class="p">[</span><span class="nb">Function</span><span class="p">]</span> <span class="nx">PI</span><span class="o">:</span> <span class="mf">3.14</span> <span class="p">}</span> <span class="p">}</span>
</span><span class='line'><span class="nx">node</span><span class="o">&gt;</span> <span class="kd">var</span> <span class="nx">c</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">circle</span><span class="p">.</span><span class="nx">Circle</span><span class="p">(</span><span class="mi">2</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span> <span class="nx">radius</span><span class="o">:</span> <span class="mi">2</span> <span class="p">}</span>
</span><span class='line'><span class="nx">node</span><span class="o">&gt;</span> <span class="nx">c</span><span class="p">.</span><span class="nx">area</span><span class="p">()</span>
</span><span class='line'><span class="mf">12.56</span>
</span></code></pre></td></tr></table></div></figure>


<p>I was reading some of the source code for the new <a href="http://groups.google.com/group/nodejs/browse_thread/thread/b6e0165f983d1f08">0.1.90 release of Node</a>, and I saw an example that made me realize we&#8217;re using this object wrong. Here&#8217;s a better way to use the above definition:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">node</span><span class="o">&gt;</span> <span class="kd">var</span> <span class="nx">Circle</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">&#39;circle_object&#39;</span><span class="p">).</span><span class="nx">Circle</span>
</span><span class='line'><span class="p">{</span> <span class="nx">Circle</span><span class="o">:</span> <span class="p">{</span> <span class="p">[</span><span class="nb">Function</span><span class="p">]</span> <span class="nx">PI</span><span class="o">:</span> <span class="mf">3.14</span> <span class="p">}</span> <span class="p">}</span>
</span><span class='line'><span class="nx">node</span><span class="o">&gt;</span> <span class="kd">var</span> <span class="nx">c</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Circle</span><span class="p">(</span><span class="mi">2</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span> <span class="nx">radius</span><span class="o">:</span> <span class="mi">2</span> <span class="p">}</span>
</span><span class='line'><span class="nx">node</span><span class="o">&gt;</span> <span class="nx">c</span><span class="p">.</span><span class="nx">area</span><span class="p">()</span>
</span><span class='line'><span class="mf">12.56</span>
</span></code></pre></td></tr></table></div></figure>


<p>Look at that! We&#8217;ve got traditional style objects without polluting the global object.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Understanding Node.js' "require"]]></title>
    <link href="http://jherdman.ca/2010-04-05/understanding-nodejs-require"/>
    <updated>2010-04-05T00:00:00-04:00</updated>
    <id>http://jherdman.ca/2010-04-05/understanding-nodejs-require</id>
    <content type="html"><![CDATA[<p>I&#8217;ve been playing with <a href="http://nodejs.org">Node.js</a> lately. Node is an asynchronous, JavaScript library for building server-side applications that uses <a href="http://commonjs.org/">CommonJS</a> conventions. One of these conventions, modules, has confused me for quite a while now. Let&#8217;s take a closer look at them.</p>

<p>We&#8217;re going to be using Node version 0.1.33 in this article. Let&#8217;s get to it.</p>

<h1>The Basics</h1>

<p>Let&#8217;s build some functions to deal with circles. Here&#8217;s some code you can find in the Node documentation:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">var</span> <span class="nx">PI</span> <span class="o">=</span> <span class="mf">3.14</span>
</span><span class='line'>
</span><span class='line'><span class="nx">exports</span><span class="p">.</span><span class="nx">area</span> <span class="o">=</span> <span class="kd">function</span> <span class="p">(</span><span class="nx">r</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">return</span> <span class="nx">PI</span> <span class="o">*</span> <span class="nx">r</span> <span class="o">*</span> <span class="nx">r</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="nx">exports</span><span class="p">.</span><span class="nx">circumference</span> <span class="o">=</span> <span class="kd">function</span> <span class="p">(</span><span class="nx">r</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">return</span> <span class="mi">2</span> <span class="o">*</span> <span class="nx">PI</span> <span class="o">*</span> <span class="nx">r</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Okay. Now let&#8217;s use this in Node. If you&#8217;re like me, your first session in Node will look something like this:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">node</span><span class="o">&gt;</span> <span class="nx">require</span><span class="p">.</span><span class="nx">paths</span><span class="p">.</span><span class="nx">unshift</span><span class="p">(</span><span class="s1">&#39;.&#39;</span><span class="p">)</span>
</span><span class='line'><span class="mi">3</span>
</span><span class='line'><span class="nx">node</span><span class="o">&gt;</span> <span class="nx">require</span><span class="p">(</span><span class="s1">&#39;circle&#39;</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span> <span class="nx">area</span><span class="o">:</span> <span class="p">[</span><span class="nb">Function</span><span class="p">],</span> <span class="nx">circumference</span><span class="o">:</span> <span class="p">[</span><span class="nb">Function</span><span class="p">]</span> <span class="p">}</span>
</span><span class='line'><span class="nx">node</span><span class="o">&gt;</span> <span class="nx">area</span>
</span><span class='line'><span class="nx">ReferenceError</span><span class="o">:</span> <span class="nx">area</span> <span class="nx">is</span> <span class="nx">not</span> <span class="nx">defined</span>
</span><span class='line'>    <span class="nx">at</span> <span class="nx">EventEmitter</span><span class="p">.</span><span class="nx">anonymous</span> <span class="p">(</span><span class="nb">eval</span> <span class="nx">at</span> <span class="nx">readline</span> <span class="p">(</span><span class="err">/usr/local/lib/node/libraries/repl.js:48:9))</span>
</span><span class='line'>    <span class="nx">at</span> <span class="nx">EventEmitter</span><span class="p">.</span><span class="nx">readline</span> <span class="p">(</span><span class="err">/usr/local/lib/node/libraries/repl.js:48:19)</span>
</span><span class='line'>    <span class="nx">at</span> <span class="nx">node</span><span class="p">.</span><span class="nx">js</span><span class="o">:</span><span class="mi">845</span><span class="o">:</span><span class="mi">9</span>
</span></code></pre></td></tr></table></div></figure>


<h2>What Just Happened?</h2>

<p>Coming from a Ruby background, I would have expected methods I required to be available to me. That&#8217;s not the case with CommonJS modules. Let&#8217;s take a look at how you should have used this module:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">node</span><span class="o">&gt;</span> <span class="nx">require</span><span class="p">.</span><span class="nx">paths</span><span class="p">.</span><span class="nx">unshift</span><span class="p">(</span><span class="s1">&#39;.&#39;</span><span class="p">)</span>
</span><span class='line'><span class="mi">3</span>
</span><span class='line'><span class="nx">node</span><span class="o">&gt;</span> <span class="kd">var</span> <span class="nx">circle</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">&#39;circle&#39;</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span> <span class="nx">area</span><span class="o">:</span> <span class="p">[</span><span class="nb">Function</span><span class="p">],</span> <span class="nx">circumference</span><span class="o">:</span> <span class="p">[</span><span class="nb">Function</span><span class="p">]</span> <span class="p">}</span>
</span><span class='line'><span class="nx">node</span><span class="o">&gt;</span> <span class="nx">circle</span><span class="p">.</span><span class="nx">area</span><span class="p">(</span><span class="mi">5</span><span class="p">)</span>
</span><span class='line'><span class="mf">78.5</span>
</span></code></pre></td></tr></table></div></figure>


<p>Success! We can now do what math that every grade four student can do. Let&#8217;s try something else:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">node</span><span class="o">&gt;</span> <span class="nx">circle</span><span class="p">.</span><span class="nx">PI</span>
</span><span class='line'><span class="nx">node</span><span class="o">&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>Nada! Node doesn&#8217;t spell it out, but we&#8217;ve just called a property of <tt>circle</tt> that doesn&#8217;t exist. Let&#8217;s verify:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">node</span><span class="o">&gt;</span> <span class="k">typeof</span> <span class="nx">circle</span><span class="p">.</span><span class="nx">PI</span> <span class="o">==</span> <span class="s1">&#39;undefined&#39;</span>
</span><span class='line'><span class="kc">true</span>
</span><span class='line'><span class="nx">node</span><span class="o">&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<h2>Making Sense of Things</h2>

<p>Is the above a little confusing for you? It sure was for me at first. If you read the Node documentation, you&#8217;ll see a nugget that might provide a clue. Check this out:</p>

<blockquote>
<p>To export an object, add to the special exports object. (Alternatively, one can use this instead of exports.)</p>
</blockquote>


<p>So, we can rewrite our circle like this:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">var</span> <span class="nx">PI</span> <span class="o">=</span> <span class="mf">3.14</span>
</span><span class='line'>
</span><span class='line'><span class="k">this</span><span class="p">.</span><span class="nx">area</span> <span class="o">=</span> <span class="kd">function</span> <span class="p">(</span><span class="nx">r</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">return</span> <span class="nx">PI</span> <span class="o">*</span> <span class="nx">r</span> <span class="o">*</span> <span class="nx">r</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">this</span><span class="p">.</span><span class="nx">circumference</span> <span class="o">=</span> <span class="kd">function</span> <span class="p">(</span><span class="nx">r</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">return</span> <span class="mi">2</span> <span class="o">*</span> <span class="nx">PI</span> <span class="o">*</span> <span class="nx">r</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>And what is <code>this</code>? Well, it&#8217;s your object! So, we can think of this module as this:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">function</span> <span class="nx">circle</span> <span class="p">()</span> <span class="p">{</span>
</span><span class='line'>  <span class="kd">var</span> <span class="nx">PI</span> <span class="o">=</span> <span class="mf">3.14</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">this</span><span class="p">.</span><span class="nx">area</span> <span class="o">=</span> <span class="kd">function</span> <span class="p">(</span><span class="nx">r</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>      <span class="k">return</span> <span class="nx">PI</span> <span class="o">*</span> <span class="nx">r</span> <span class="o">*</span> <span class="nx">r</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">this</span><span class="p">.</span><span class="nx">circumference</span> <span class="o">=</span> <span class="kd">function</span> <span class="p">(</span><span class="nx">r</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>      <span class="k">return</span> <span class="mi">2</span> <span class="o">*</span> <span class="nx">PI</span> <span class="o">*</span> <span class="nx">r</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>You&#8217;re seen this before. It&#8217;s a JavaScrip object. So modules are really nothing more than objects. As a short form, we&#8217;re just defining the body of the object. Now we have a mental model of how CommonJS modules work. In fact, we&#8217;d use this object just like we used our circle functions with Node:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">node</span><span class="o">&gt;</span> <span class="kd">var</span> <span class="nx">c</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">circle</span><span class="p">();</span>
</span><span class='line'><span class="nx">node</span><span class="o">&gt;</span> <span class="nx">c</span><span class="p">.</span><span class="nx">area</span><span class="p">(</span><span class="mi">5</span><span class="p">)</span>
</span><span class='line'><span class="mf">78.5</span>
</span></code></pre></td></tr></table></div></figure>


<h1>Where You&#8217;re Probably Making Your Mistake (and I Did Too)</h1>

<p>You, probably like me, come from an Object-Oriented background. Let&#8217;s look at how we&#8217;d write our circle in my favourite language, Ruby.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">Circle</span>
</span><span class='line'>  <span class="no">PI</span> <span class="o">=</span> <span class="mi">3</span><span class="o">.</span><span class="mi">14</span>
</span><span class='line'>  
</span><span class='line'>  <span class="kp">attr_accessor</span> <span class="ss">:radius</span>
</span><span class='line'>  
</span><span class='line'>  <span class="k">def</span> <span class="nf">intialize</span><span class="p">(</span><span class="n">radius</span><span class="p">)</span>
</span><span class='line'>      <span class="nb">self</span><span class="o">.</span><span class="n">radius</span> <span class="o">=</span> <span class="n">radius</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>  
</span><span class='line'>  <span class="k">def</span> <span class="nf">area</span>
</span><span class='line'>      <span class="no">PI</span> <span class="o">*</span> <span class="n">radius</span> <span class="o">**</span> <span class="mi">2</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>And to use it&#8230;</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="o">&gt;</span> <span class="nb">require</span> <span class="s1">&#39;circle&#39;</span>
</span><span class='line'><span class="o">&gt;</span> <span class="n">c</span> <span class="o">=</span> <span class="no">Circle</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="mi">2</span><span class="p">)</span>
</span><span class='line'><span class="o">&gt;</span> <span class="n">c</span><span class="o">.</span><span class="n">area</span>
</span><span class='line'><span class="o">=&gt;</span> <span class="mi">12</span><span class="o">.</span><span class="mi">56</span>
</span></code></pre></td></tr></table></div></figure>


<p>If you&#8217;re anything like me, you&#8217;d be tempted to do something like this when you first try out Node:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">var</span> <span class="nx">Circle</span> <span class="o">=</span> <span class="kd">function</span> <span class="p">(</span><span class="nx">radius</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">this</span><span class="p">.</span><span class="nx">radius</span> <span class="o">=</span> <span class="nx">radius</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="nx">Circle</span><span class="p">.</span><span class="nx">PI</span> <span class="o">=</span> <span class="mf">3.14</span>
</span><span class='line'>
</span><span class='line'><span class="nx">Circle</span><span class="p">.</span><span class="nx">prototype</span> <span class="o">=</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">area</span><span class="o">:</span> <span class="kd">function</span> <span class="p">()</span> <span class="p">{</span>
</span><span class='line'>      <span class="k">return</span> <span class="nx">Circle</span><span class="p">.</span><span class="nx">PI</span> <span class="o">*</span> <span class="k">this</span><span class="p">.</span><span class="nx">radius</span> <span class="o">*</span> <span class="k">this</span><span class="p">.</span><span class="nx">radius</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="nx">exports</span><span class="p">.</span><span class="nx">Circle</span> <span class="o">=</span> <span class="nx">Circle</span>
</span></code></pre></td></tr></table></div></figure>


<p>What happens when we try to use this module?</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">node</span><span class="o">&gt;</span> <span class="kd">var</span> <span class="nx">circle</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">&#39;circle_object&#39;</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span> <span class="nx">Circle</span><span class="o">:</span> <span class="p">{</span> <span class="p">[</span><span class="nb">Function</span><span class="p">]</span> <span class="nx">PI</span><span class="o">:</span> <span class="mf">3.14</span> <span class="p">}</span> <span class="p">}</span>
</span><span class='line'><span class="nx">node</span><span class="o">&gt;</span> <span class="kd">var</span> <span class="nx">c</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">circle</span><span class="p">.</span><span class="nx">Circle</span><span class="p">(</span><span class="mi">2</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span> <span class="nx">radius</span><span class="o">:</span> <span class="mi">2</span> <span class="p">}</span>
</span><span class='line'><span class="nx">node</span><span class="o">&gt;</span> <span class="nx">c</span><span class="p">.</span><span class="nx">area</span><span class="p">()</span>
</span><span class='line'><span class="mf">12.56</span>
</span></code></pre></td></tr></table></div></figure>


<p>Hmm. Awkward. We can get around this simple by removing the <tt>var</tt>, and dropping <tt>exports</tt> as follows:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">Circle</span> <span class="o">=</span> <span class="kd">function</span> <span class="p">(</span><span class="nx">radius</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">this</span><span class="p">.</span><span class="nx">radius</span> <span class="o">=</span> <span class="nx">radius</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="nx">Circle</span><span class="p">.</span><span class="nx">PI</span> <span class="o">=</span> <span class="mf">3.14</span>
</span><span class='line'>
</span><span class='line'><span class="nx">Circle</span><span class="p">.</span><span class="nx">prototype</span> <span class="o">=</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">area</span><span class="o">:</span> <span class="kd">function</span> <span class="p">()</span> <span class="p">{</span>
</span><span class='line'>      <span class="k">return</span> <span class="nx">Circle</span><span class="p">.</span><span class="nx">PI</span> <span class="o">*</span> <span class="k">this</span><span class="p">.</span><span class="nx">radius</span> <span class="o">*</span> <span class="k">this</span><span class="p">.</span><span class="nx">radius</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>And we can use it like we did with our Ruby object:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">node</span><span class="o">&gt;</span> <span class="nx">require</span><span class="p">(</span><span class="s1">&#39;circle_object&#39;</span><span class="p">)</span>
</span><span class='line'><span class="p">{}</span>
</span><span class='line'><span class="nx">node</span><span class="o">&gt;</span> <span class="nx">Circle</span>
</span><span class='line'><span class="p">{</span> <span class="p">[</span><span class="nb">Function</span><span class="p">]</span> <span class="nx">PI</span><span class="o">:</span> <span class="mf">3.14</span> <span class="p">}</span>
</span><span class='line'><span class="nx">node</span><span class="o">&gt;</span> <span class="kd">var</span> <span class="nx">c</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Circle</span><span class="p">(</span><span class="mi">3</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span> <span class="nx">radius</span><span class="o">:</span> <span class="mi">3</span> <span class="p">}</span>
</span><span class='line'><span class="nx">node</span><span class="o">&gt;</span> <span class="nx">c</span><span class="p">.</span><span class="nx">area</span><span class="p">()</span>
</span><span class='line'><span class="mf">28.259999999999998</span>
</span></code></pre></td></tr></table></div></figure>


<p>Our Circle object was defined on the global object. So, surprise, surprise, it&#8217;s globally available to us too.</p>

<p>However, we&#8217;ve seen that we don&#8217;t really need to do this most of the time. We can simply write the body of our function and export the API we wish to make public.</p>

<h1>In Summary</h1>

<p>Let&#8217;s look at what we&#8217;ve learned:</p>

<ul>
<li>In a CommonJS module, if you want something to be available to your user, you must <code>export</code> it.</li>
<li>Things that aren&#8217;t exported are still available to the exported functions and values. This is why <code>area</code> can access the value of <code>PI</code>, but we couldn&#8217;t. In this way, <code>PI</code> is private.</li>
<li>The file defining our functions acts as a namespace. Methods and values we provide users of our module must bed exported.</li>
<li>If you want to write a traditional class, define it on the global object (please see <a href="#edit_2010_04_08">edit</a>)</li>
</ul>


<p>Try writing a module in Node. Practice what we&#8217;ve learned.</p>

<p><a name="edit_2010_04_08"></a></p>

<h2>A Note on the Final Example (edit, April 8, 2010)</h2>

<p>In reading comments on Reddit, I wanted to make note of <a href="http://www.reddit.com/r/javascript/comments/bnghc/understanding_nodejs_require/c0nnzqh">masklinn&#8217;s comment</a>:</p>

<blockquote><p>The piece of code at the end is downright dangerous (because it mucks up <br/>global objects, potentially overwriting properties in other modules), and <br/>there&#8217;s nothing object oriented about ruby&#8217;s behavior, if anything it&#8217;s <br/>abject-oriented. Ruby&#8217;s require is akin&#8217;s to PHP&#8217;s include or C&#8217;s very own <br/>#include, it just dumps the required file in the local namespace and executes <br/>it.</p><p>Node.js&#8217;s original behavior, where require actually creates and returns a <br/>full-fledged object is infinitely cleaner and far more object-oriented.</p><footer><strong>masklinn</strong> <cite><a href='http://www.reddit.com/r/javascript/comments/bnghc/understanding_nodejs_require/c0nnzqh'>www.reddit.com/r/javascript/&hellip;</a></cite></footer></blockquote>


<p>Masklinn is absolutely correct! In case it was entirely clear above, I feel
it important to reiterate that <strong>this is not a good way to make objects when
using Node</strong>. It&#8217;s dangerous, and unnecessary. Try to think of the file as
the contents of your class&#8217; body, and the exported methods as the public
interface.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Hello, world!]]></title>
    <link href="http://jherdman.ca/2010-04-04/hello-world"/>
    <updated>2010-04-04T00:00:00-04:00</updated>
    <id>http://jherdman.ca/2010-04-04/hello-world</id>
    <content type="html"><![CDATA[<p>This is my blog. This was going to be a mission statement. Instead I&#8217;ve decided to just ramble incoherently for a bit and suggest that I may eventually have content.</p>
]]></content>
  </entry>
  
</feed>
